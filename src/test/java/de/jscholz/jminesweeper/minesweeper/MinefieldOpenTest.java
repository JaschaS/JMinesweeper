package de.jscholz.jminesweeper.minesweeper;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.util.*;

public class MinefieldOpenTest {

    public Minefield minefield;

    @Before
    public void init() {
        minefield = (Minefield) GameCreator.createBeginnerGame();
    }

    @Test
    public void openSuccessfulTest() {
        //find valid cell
        final Cell c = getCell(ICell.CellContent.EMPTY);
        Assert.assertFalse(c == null);

        //check if successful
        final IMinefield.OpenReturn result = minefield.open(c.getPosition());
        Assert.assertEquals(IMinefield.OpenReturn.OPEN, result);

        //check the openlist.size > 0
        final Set<ICell> cells = minefield.getUpdateCells();
        Assert.assertFalse(cells.size() == 0);

        //check if game is over
        final boolean gameOVer = minefield.gameOver();
        Assert.assertFalse(gameOVer);
    }

    @Test
    public void openEmptyCellTest() {
        //find cell with state open
        final Cell c = getCell(ICell.CellContent.EMPTY);
        Assert.assertFalse(c == null);

        //check if successful
        final IMinefield.OpenReturn result = minefield.open(c.getPosition());
        Assert.assertEquals(IMinefield.OpenReturn.OPEN, result);

        //check the openlist.size > 1
        final Set<ICell> cells = minefield.getUpdateCells();
        Assert.assertTrue(cells.size() > 1);
    }

    @Test
    public void openNumberCellTest() {
        //find cell with state open
        final Cell c = getCell(ICell.CellContent.ONE);
        Assert.assertFalse(c == null);

        //check if successful
        final IMinefield.OpenReturn result = minefield.open(c.getPosition());
        Assert.assertEquals(IMinefield.OpenReturn.OPEN, result);

        //check the openlist.size > 1
        final Set<ICell> cells = minefield.getUpdateCells();
        Assert.assertTrue(cells.size() == 1);
    }

    @Test
    public void openAnyCellAlreadyOpenTest() {
        //find valid cell
        Cell c = getCell(ICell.CellContent.EMPTY);
        Assert.assertFalse(c == null);

        //check if successful
        IMinefield.OpenReturn result = minefield.open(c.getPosition());
        Assert.assertEquals(IMinefield.OpenReturn.OPEN, result);

        //find cell with state open
        c = getCell(ICell.CellState.OPEN);
        Assert.assertFalse(c == null);

        //try to open cell
        result = minefield.open(c.getPosition());
        Assert.assertEquals(IMinefield.OpenReturn.IS_ALREADY_OPEN, result);

        //check the openlist.size should be 0
        final Set<ICell> cells = minefield.getUpdateCells();
        Assert.assertEquals(0, cells.size());

        //check if game is over
        final boolean gameOVer = minefield.gameOver();
        Assert.assertFalse(gameOVer);
    }

    @Test
    public void openCellInvalidPositionTest() {
        //try to open cell
        final IMinefield.OpenReturn result = minefield.open(new CellPosition(-1, -1));
        Assert.assertEquals(IMinefield.OpenReturn.NOT_VALID, result);

        //check the openlist.size should be 0
        final Set<ICell> cells = minefield.getUpdateCells();
        Assert.assertEquals(0, cells.size());

        //check if game is over
        final boolean gameOVer = minefield.gameOver();
        Assert.assertFalse(gameOVer);
    }

    @Test
    public void openFlaggedCellTest() {
        final IMinefield.OpenReturn flagReturn = minefield.flagCell(0, 0);
        Assert.assertEquals(IMinefield.OpenReturn.NOW_FLAGGED, flagReturn);

        //find cell with state open
        final Cell c = getCell(ICell.CellState.FLAGGED);
        Assert.assertFalse(c == null);

        //try to open cell
        final IMinefield.OpenReturn result = minefield.open(c.getPosition());
        Assert.assertEquals(IMinefield.OpenReturn.WAS_FLAGGED, result);

        //check the openlist.size should be 0
        final Set<ICell> cells = minefield.getUpdateCells();
        Assert.assertEquals(0, cells.size());

        //check if game is over
        final boolean gameOVer = minefield.gameOver();
        Assert.assertFalse(gameOVer);
    }

    @Test
    public void openMineCellTest() {
        //find cell with content mine
        final Cell c = getCell(ICell.CellContent.MINE);
        Assert.assertFalse(c == null);

        //try to open cell
        final IMinefield.OpenReturn result = minefield.open(c.getPosition());
        Assert.assertEquals(IMinefield.OpenReturn.WAS_MINE, result);

        //check the openlist.size should contain all cells
        final Set<ICell> cells = minefield.getUpdateCells();
        Assert.assertEquals(minefield.getOriginalField().size(), cells.size());

        //check if game is over
        final boolean gameOVer = minefield.gameOver();
        Assert.assertTrue(gameOVer);
    }

    @Test
    public void openGameAlreadyOverTest() {
        //find cell with state open
        final Cell c = getCell(ICell.CellContent.MINE);
        Assert.assertFalse(c == null);

        //try to open cell
        IMinefield.OpenReturn result = minefield.open(c.getPosition());
        Assert.assertEquals(IMinefield.OpenReturn.WAS_MINE, result);

        //try to open cell
        result = minefield.open(0,0);
        Assert.assertEquals(IMinefield.OpenReturn.GAME_IS_ALREADY_OVER, result);

        //check the openlist.size should contain all cells
        final Set<ICell> cells = minefield.getUpdateCells();
        Assert.assertEquals(minefield.getOriginalField().size(), cells.size());

        //check if game is over
        final boolean gameOVer = minefield.gameOver();
        Assert.assertTrue(gameOVer);
    }

    private Cell getCell(final ICell.CellContent content) {
        Map<ICellPosition, Cell> field = minefield.getOriginalField();

        for(final Cell c : field.values()) {
            if(c.getContent() == content) return c;
        }

        return null;
    }

    private Cell getCell(final ICell.CellState state) {
        Map<ICellPosition, Cell> field = minefield.getOriginalField();

        for(final Cell c : field.values()) {
            if(c.getCellState() == state) return c;
        }

        return null;
    }

}
